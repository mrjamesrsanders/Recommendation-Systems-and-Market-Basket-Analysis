library(tidyverse)
library(caret)
library(e1071)
library(glmnet)
library(MLmetrics)
library(caretEnsemble)
library(kernlab)
library(readr)
CompleteResponses <- read_csv("~/Downloads/SurveyData (1)/CompleteResponses.csv",
col_types = cols(brand = col_factor(levels = c("0",
"1"))))
View(CompleteResponses)
nearZeroVar(CompleteResponses, freqCut = 95/5, uniqueCut = 10)
nearZeroVar(CompleteResponses, freqCut = 80/20, uniqueCut = 10)
set.seed(355)
trainIndex <- createDataPartition(CompleteResponses$Brand, p = 0.7, list = FALSE)
trainIndex <- createDataPartition(CompleteResponses$brand, p = 0.7, list = FALSE)
trainingSet <- CompleteResponses[trainIndex,]
testSet <- GermanCredit[-trainIndex,]
testSet <- CompleteResponses[-trainIndex,]
subsets <- c(1:5, 10, 15, 20)
set.seed(355)
rf <- train(brand ~., data = trainingSet, method = "rf")
rf
varimp_RF <- varImp(rf)
plot(varimp_RF, main = "Complete Response Variable Importance (Random Forest)")
fitted <- predict(rf, testSet)
fitted[1:10]
confusionMatrix(reference = testSet$brand, data = fitted, mode = "everything", positive = "Good")
twoClassCtrl <- trainControl(
method = "repeatedcv",
number = 5,
repeats = 5,
savePredictions = "final",
classProbs = T,
summaryFunction = twoClassSummary
)
set.seed(355)
rfTL <- train(brand ~., data = trainingSet, method = "rf", metric = "ROC", trControl = twoClassCtrl, tuneLength = 10)
rfTL
?make.names
levels(CompleteResponses$brand) <- c("zero", "one")
> twoClassCtrl <- trainControl(
+     method = "repeatedcv",
+     number = 5,
+     repeats = 5,
+     savePredictions = "final",
+     classProbs = T,
+     summaryFunction = twoClassSummary
+ )
twoClassCtrl <- trainControl(
method = "repeatedcv",
number = 5,
repeats = 5,
savePredictions = "final",
classProbs = T,
summaryFunction = twoClassSummary
)
set.seed(355)
rfTL <- train(Class ~., data = trainingSet, method = "rf", metric = "ROC", trControl = twoClassCtrl, tuneLength = 10)
rfTL <- train(brand ~., data = trainingSet, method = "rf", metric = "ROC", trControl = twoClassCtrl, tuneLength = 10)
train.control <- trainControl(method = "repeatedcv",
number = 10, repeats = 3)
rfTL <- train(brand ~., data = trainingSet, method = "rf", trControl = train.control)
fittedTL <- predict(rfTL, testSet)
confusionMatrix(reference = testSet$Class, data = fittedTL, mode = "everything", positive = "Good")
confusionMatrix(reference = testSet$brand, data = fittedTL, mode = "everything", positive = "Good")
rfGrid <- data.frame(mtry = c(3, 5, 7, 9, 10, 11, 12, 13, 15, 17, 19))
rfGrid <- data.frame(mtry = c(1, 2, 3, 4, 5))
set.seed(355)
rfTG <- train(brand ~., data = trainingSet, method = "rf", trControl = train.control, tuneGrid = rfGrid)
rfTG
fittedTG <- predict(rfTG, testSet)
fittedTG
library(C50)
set.seed(355)
c50TG <- train(brand ~., data = trainingSet, method = "c50", trControl = train.control, tuneGrid = rfGrid)
C50TG <- train(brand ~., data = trainingSet, method = "C50", trControl = train.control, tuneGrid = rfGrid)
c50 <- train(brand ~., data = trainingSet, method = "C50")
library(C50)
c50 <- train(brand ~., data = trainingSet, method = "C.50")
install.packages(C50)
install.packages('C50')
install.packages("C50")
rfTG
library(C50)
install.packages('inum')
library(C50)
c50 <- train(brand ~., data = trainingSet, method = "C.50")
library(caret)
c50 <- train(brand ~., data = trainingSet, method = "C.50")
library(C50)
c50 <- train(brand ~., data = trainingSet, method = "C.50")
names(getModelInfo())
set.seed(355)
trainIndex <- createDataPartition(CompleteResponses$brand, p = 0.7, list = FALSE)
trainingSet <- CompleteResponses[trainIndex,]
testSet <- CompleteResponses[-trainIndex,]
cf <- train(brand ~., data = trainingSet, method = "C5.0")
cf
train.control <- trainControl(
method = "repeatedcv",
number = 10,
repeats = 5,
savePredictions = "final",
classProbs = T,
summaryFunction = twoClassSummary
)
cfGrid <- data.frame(mtry = c(1, 2, 3, 4, 5))
set.seed(355)
cfTG <- train(brand ~., data = trainingSet, method = "C5.0", train.control = twoClassCtrl, tuneGrid = cfGrid)
cfGrid<- data.frame( .winnow = c(TRUE,FALSE), .trials=c(1,2,3,4,5), .model="tree" )
library(readr)
SurveyIncomplete <- read_csv("~/Downloads/SurveyData (1) 2/SurveyIncomplete.csv")
View(SurveyIncomplete)
fittedSI <- predict(rfTG, SurveyIncomplete)
fittedSI
summary(fittedSI)
methodCtrl <- trainControl(
method = "repeatedcv",
number = 5,
repeats = 5,
savePredictions = "final",
classProbs = T,
summaryFunction = twoClassSummary
)
methodList <- c("rf", "glmnet", "svmRadial")
set.seed(355)
ensemble <- caretList(brand ~ ., data = trainingSet, trControl = methodCtrl, methodList = methodList)
libary(caretensemble)
library(caretEnsemble)
ensemble <- caretList(brand ~ ., data = trainingSet, trControl = methodCtrl, methodList = methodList)
ensemble
summary(rfTG)
rfTG
summary(fittedTG)
rbind(CompleteResponses,fittedTG,fittedSI)
CompleteD<-rbind(CompleteResponses,fittedTG,fittedSI)
CompleteD
Summary(CompleteD)
summary(CompleteD)
levels(fittedTG$brand) <- c("zero", "one")
fittedTG
summary(fittedTG)
summary(fittedSI)
install.packages("xlsx")
write.xlsx(fittedSI, "desktop/fittedTG.xlsx")
library(xlsx)
write.table(fittedTG, "desktop/fittedTG.txt", sep="\t")
write.table(fittedTG, "desktop\fittedTG.txt", sep="\t")
write.table(fittedTG, "Desktop\fittedTG.txt", sep="\t")
cf
rfTG
savehistory("~/Desktop/C3task2/Course3task2practice/Course 3 task 2 history.Rhistory")
